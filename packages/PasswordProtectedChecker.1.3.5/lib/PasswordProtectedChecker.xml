<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PasswordProtectedChecker</name>
    </assembly>
    <members>
        <member name="T:PasswordProtectedChecker.Checker">
            <summary>
                A class with methods to check if a file is password protected
            </summary>
        </member>
        <member name="M:PasswordProtectedChecker.Checker.IsFileProtected(System.String)">
            <summary>
                Returns <c>true</c> when the given <paramref name="fileName" /> is password protected
            </summary>
            <param name="fileName"></param>
            <returns></returns>
            <exception cref="T:PasswordProtectedChecker.Exceptions.PPCFileIsCorrupt">Raised when the file is corrupt</exception>
        </member>
        <member name="M:PasswordProtectedChecker.Checker.IsStreamProtected(System.IO.Stream,System.String)">
            <summary>
                Returns <c>true</c> when the given file in the <paramref name="fileStream" /> is password protected
            </summary>
            <param name="fileStream">The file stream</param>
            <param name="fileNameOrExtension">
                The filename or extension for the file that is inside the stream. When set to <c>null</c>
                the method tries to autodetect the type of file that is inside the file stream
            </param>
            <returns></returns>
            <exception cref="T:PasswordProtectedChecker.Exceptions.PPCFileIsCorrupt">Raised when the file is corrupt</exception>
            <exception cref="T:PasswordProtectedChecker.Exceptions.PPCInvalidFile">Raised when the program could not detect what kind of file the stream is</exception>
        </member>
        <member name="M:PasswordProtectedChecker.Checker.IsStreamProtected(System.IO.Stream,System.String,PasswordProtectedChecker.Result)">
            <summary>
                Returns <c>true</c> when the given file in the <paramref name="fileStream" /> is password protected
            </summary>
            <param name="fileStream">The file stream</param>
            <param name="fileNameOrExtension">
                The filename or extension for the file that is inside the stream. When set to <c>null</c>
                the method tries to autodetect the type of file that is inside the file stream
            </param>
            <param name="checkerResult"></param>
            <returns></returns>
            <exception cref="T:PasswordProtectedChecker.Exceptions.PPCFileIsCorrupt">Raised when the file is corrupt</exception>
            <exception cref="T:PasswordProtectedChecker.Exceptions.PPCInvalidFile">Raised when the program could not detect what kind of file the stream is</exception>
        </member>
        <member name="M:PasswordProtectedChecker.Checker.IsWordPasswordProtected(System.IO.Stream)">
            <summary>
                Returns <c>true</c> when the Word file is password protected
            </summary>
            <param name="fileStream">A stream to the file</param>
            <returns></returns>
            <exception cref="T:PasswordProtectedChecker.Exceptions.PPCFileIsCorrupt">Raised when the file stream is corrupt</exception>
        </member>
        <member name="M:PasswordProtectedChecker.Checker.IsExcelPasswordProtected(System.IO.Stream)">
            <summary>
                Returns <c>true</c> when the Excel file is password protected
            </summary>
            <param name="fileStream">A stream to the file</param>
            <returns></returns>
            <exception cref="T:PasswordProtectedChecker.Exceptions.PPCFileIsCorrupt">Raised when the file stream is corrupt</exception>
        </member>
        <member name="M:PasswordProtectedChecker.Checker.IsPowerPointPasswordProtected(System.IO.Stream)">
            <summary>
                Returns <c>true</c> when the binary PowerPoint file is password protected
            </summary>
            <param name="fileStream">A stream to the file</param>
            <returns></returns>
            <exception cref="T:PasswordProtectedChecker.Exceptions.PPCFileIsCorrupt">Raised when the file stream is corrupt</exception>
        </member>
        <member name="M:PasswordProtectedChecker.Checker.IsOpenDocumentFormatPasswordProtected(System.IO.Stream)">
            <summary>
                Returns true when the <paramref name="fileStream" /> is password protected
            </summary>
            <param name="fileStream">A stream to the file</param>
            <exception cref="T:PasswordProtectedChecker.Exceptions.PPCFileIsCorrupt">Raised when the file stream is corrupt</exception>
        </member>
        <member name="M:PasswordProtectedChecker.Checker.IsZipPasswordProtected(System.IO.Stream,PasswordProtectedChecker.Result)">
            <summary>
                Returns <c>true</c> when the ZIP file is password protected
            </summary>
            <param name="fileStream">A stream to the file</param>
            <param name="checkerResult"><see cref="T:PasswordProtectedChecker.Result"/></param>
            <returns></returns>
            <exception cref="T:PasswordProtectedChecker.Exceptions.PPCFileIsCorrupt">Raised when the file stream is corrupt</exception>
        </member>
        <member name="M:PasswordProtectedChecker.Checker.IsMsgPasswordProtected(System.IO.Stream,PasswordProtectedChecker.Result)">
            <summary>
                Returns <c>true</c> when one or more attachments in the MSG file are password protected
            </summary>
            <param name="fileStream">A stream to the file</param>
            <param name="checkerResult"><see cref="T:PasswordProtectedChecker.Result"/></param>
            <returns></returns>
            <exception cref="T:PasswordProtectedChecker.Exceptions.PPCFileIsCorrupt">Raised when the file stream is corrupt</exception>
        </member>
        <member name="M:PasswordProtectedChecker.Checker.IsEmlPasswordProtected(System.IO.Stream,PasswordProtectedChecker.Result)">
            <summary>
                Returns <c>true</c> when one or more attachments in the EML file are password protected
            </summary>
            <param name="fileStream">A stream to the file</param>
            <param name="checkerResult"><see cref="T:PasswordProtectedChecker.Result"/></param>
            <returns></returns>
            <exception cref="T:PasswordProtectedChecker.Exceptions.PPCFileIsCorrupt">Raised when the file stream is corrupt</exception>
        </member>
        <member name="T:PasswordProtectedChecker.Result">
            <summary>
                A placeholder to return the result of a check with a breadcrumb trail about the
                file that has a password when the result is <c>true</c>
            </summary>
        </member>
        <member name="P:PasswordProtectedChecker.Result.Protected">
            <summary>
                Returns the result
            </summary>
        </member>
        <member name="P:PasswordProtectedChecker.Result.Parent">
            <summary>
                The file parent
            </summary>
        </member>
        <member name="P:PasswordProtectedChecker.Result.Children">
            <summary>
                The children files
            </summary>
        </member>
        <member name="P:PasswordProtectedChecker.Result.ParentResult">
            <summary>
                The <see cref="T:PasswordProtectedChecker.Result"/> parent
            </summary>
        </member>
        <member name="P:PasswordProtectedChecker.Result.Trail">
            <summary>
                Returns the trail to the password protected file
            </summary>
        </member>
        <member name="M:PasswordProtectedChecker.Result.AddParentFile(System.String)">
            <summary>
                Adds a file to the trail
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:PasswordProtectedChecker.Result.AddChildFile(System.String)">
            <summary>
                Adds a file to the trail
            </summary>
            <param name="file"></param>
        </member>
        <member name="T:PasswordProtectedChecker.Exceptions.PPCInvalidFile">
            <summary>
                Raised when the program could not detect what kind of file the stream is
            </summary>
        </member>
        <member name="T:PasswordProtectedChecker.Exceptions.PPCStreamToShort">
            <summary>
                Raised when the stream is shorter the 100 bytes
            </summary>
        </member>
        <member name="T:PasswordProtectedChecker.Exceptions.PPCFileIsCorrupt">
            <summary>
                Raised when the Microsoft Office file is corrupt
            </summary>
        </member>
        <member name="F:PasswordProtectedChecker.Helpers.FileManager.MaxPath">
            <summary>
            The max path length in Windows
            </summary>
        </member>
        <member name="M:PasswordProtectedChecker.Helpers.FileManager.GetTempDirectory(System.String)">
            <summary>
            Returns a temp directory
            </summary>
            <param name="tempPath">The path where to create the temp directory or <c>null</c>
            to use the default temp path</param>
            <returns></returns>
        </member>
        <member name="M:PasswordProtectedChecker.Helpers.FileManager.CheckForBackSlash(System.String)">
            <summary>
            Check if there is a backslash at the end of the string and if not add it
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:PasswordProtectedChecker.Helpers.FileManager.ValidateLongFileName(System.String,System.Int32)">
            <summary>
            Validates the length of <paramref name="fileName"/>, when this is longer then <see cref="F:PasswordProtectedChecker.Helpers.FileManager.MaxPath"/> chars it will be truncated.
            </summary>
            <param name="fileName">The filename with path</param>
            <param name="extraTruncateSize">Optional extra truncate size, when not used the filename is truncated until it fits</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Raised when no path or file name is given in the <paramref name="fileName"/></exception>
            <exception cref="T:System.IO.PathTooLongException">Raised when it is not possible to truncate the <paramref name="fileName"/></exception>
        </member>
        <member name="M:PasswordProtectedChecker.Helpers.FileManager.GetExtension(System.String)">
            <summary>
            Returns the extension of the specified <paramref name="path"/> string
            </summary>
            <param name="path">The path of the file</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Raised when no path is given</exception>
        </member>
        <member name="M:PasswordProtectedChecker.Helpers.FileManager.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified <paramref name="path"/> string without the extension
            </summary>
            <param name="path">The path of the file</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PasswordProtectedChecker.Helpers.FileManager.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified <paramref name="path"/> string
            </summary>
            <param name="path">The path of a file or directory</param>
            <returns></returns>
        </member>
        <member name="M:PasswordProtectedChecker.Helpers.FileManager.FileExistsMakeNew(System.String,System.Boolean,System.Int32)">
            <summary>
            Checks if a file already exists and if so adds a number until the file is unique
            </summary>
            <param name="fileName">The file to check</param>
            <param name="validateLongFileName">When true validation will be performed on the max path lengt</param>
            <param name="extraTruncateSize"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Raised when no path or file name is given in the <paramref name="fileName"/></exception>
            <exception cref="T:System.IO.PathTooLongException">Raised when it is not possible to truncate the <paramref name="fileName"/></exception>
        </member>
        <member name="T:PasswordProtectedChecker.Helpers.FileTypeFileInfo">
            <summary>
            This class is used as a placeholder for the filetype information
            </summary>
        </member>
        <member name="P:PasswordProtectedChecker.Helpers.FileTypeFileInfo.MagicBytes">
            <summary>
            The magic bytes
            </summary>
        </member>
        <member name="P:PasswordProtectedChecker.Helpers.FileTypeFileInfo.MagicBytesAsString">
            <summary>
            The magic bytes as a string
            </summary>
        </member>
        <member name="P:PasswordProtectedChecker.Helpers.FileTypeFileInfo.Extension">
            <summary>
            The file type extension that belongs to the magic bytes (e.g. doc, xls, msg)
            </summary>
        </member>
        <member name="P:PasswordProtectedChecker.Helpers.FileTypeFileInfo.Description">
            <summary>
            Description of the file
            </summary>
        </member>
        <member name="M:PasswordProtectedChecker.Helpers.FileTypeFileInfo.#ctor(System.Byte[],System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="magicBytes">The magic bytes</param>
            <param name="extension">The file type extension that belongs to the magic bytes (e.g. doc, xls, msg)</param>
            <param name="description">Description of the file (e.g. Word document, Outlook message, etc...)</param>
        </member>
        <member name="T:PasswordProtectedChecker.Helpers.FileTypeSelector">
            <summary>
            This class can be used to recognize files by their magic bytes
            </summary>
        </member>
        <member name="F:PasswordProtectedChecker.Helpers.FileTypeSelector.FileTypes">
            <summary>
            Contains all the magic bytes and their description
            </summary>
        </member>
        <member name="M:PasswordProtectedChecker.Helpers.FileTypeSelector.Stb(System.String)">
            <summary>
            Converts a string to a byte array
            </summary>
            <param name="line">String to convert</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:PasswordProtectedChecker.Helpers.FileTypeSelector.GetFileTypes">
            <summary>
            A list with most of the used file types and their magic bytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:PasswordProtectedChecker.Helpers.FileTypeSelector.IndexOf(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            IndexOf function for byte arrays
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PasswordProtectedChecker.Helpers.FileTypeSelector.GetFileTypeFileInfo(System.Byte[])">
            <summary>
            Returns a <see cref="T:PasswordProtectedChecker.Helpers.FileTypeFileInfo"/> object by looking to the magic bytes of the <param ref="fileBytes"/> array.
            A <see cref="T:PasswordProtectedChecker.Helpers.FileTypeFileInfo"/> object
            </summary>
            <param name="fileBytes">The bytes of the file</param>
            <returns></returns>
        </member>
        <member name="M:PasswordProtectedChecker.Helpers.FileTypeSelector.CheckMicrosoftOfficeFormatsWithAsciiReading(System.Byte[])">
            <summary>
            Tries to recognize an Microsoft Office file by looking to it's internal bytes
            </summary>
            <param name="fileBytes">The bytes of the file</param>
            <returns></returns>
        </member>
        <member name="M:PasswordProtectedChecker.Helpers.FileTypeSelector.CheckZipOrOpenOfficeFormat(System.Byte[])">
            <summary>
            Tries to recognize an Microsoft Office 2007+ file by looking to it's internal bytes
            </summary>
            <param name="fileBytes">The bytes of the file</param>
        </member>
        <member name="M:PasswordProtectedChecker.Helpers.FileTypeSelector.StripByteOrderMarker(System.Byte[])">
            <summary>
            Strips the BOM from the magic bytes array
            </summary>
            <param name="magicBytes"></param>
            <returns>Byte array without BOM</returns>
        </member>
    </members>
</doc>
